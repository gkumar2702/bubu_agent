name: Test Bubu Agent

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        python --version
        pip --version

    - name: Install dependencies
      run: |
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test environment file
      run: |
        source venv/bin/activate
        cp setup/env.example .env
        # Set test values for required environment variables
        sed -i 's/GF_NAME=YourGirlfriendName/GF_NAME=TestGirlfriend/g' .env
        sed -i 's/GF_WHATSAPP_NUMBER=+1234567890/GF_WHATSAPP_NUMBER=+1234567890/g' .env
        sed -i 's/SENDER_WHATSAPP_NUMBER=+1234567890/SENDER_WHATSAPP_NUMBER=+1234567890/g' .env
        sed -i 's/HF_API_KEY=your_huggingface_api_key_here/HF_API_KEY=test_key/g' .env
        sed -i 's/API_BEARER_TOKEN=your_secure_bearer_token_here/API_BEARER_TOKEN=test_token/g' .env
        sed -i 's/TWILIO_ACCOUNT_SID=your_twilio_account_sid/TWILIO_ACCOUNT_SID=test_sid/g' .env
        sed -i 's/TWILIO_AUTH_TOKEN=your_twilio_auth_token/TWILIO_AUTH_TOKEN=test_token/g' .env
        sed -i 's/TWILIO_WHATSAPP_FROM=whatsapp:+1234567890/TWILIO_WHATSAPP_FROM=whatsapp:+1234567890/g' .env

    - name: Run linting
      run: |
        source venv/bin/activate
        make lint

    - name: Run tests
      run: |
        source venv/bin/activate
        make test

    - name: Run tests with coverage
      run: |
        source venv/bin/activate
        pip install pytest-cov
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        python --version

    - name: Install dependencies
      run: |
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Setup test environment
      run: |
        source venv/bin/activate
        cp setup/env.example .env
        # Configure test environment
        sed -i 's/GF_NAME=YourGirlfriendName/GF_NAME=TestGirlfriend/g' .env
        sed -i 's/GF_WHATSAPP_NUMBER=+1234567890/GF_WHATSAPP_NUMBER=+1234567890/g' .env
        sed -i 's/SENDER_WHATSAPP_NUMBER=+1234567890/SENDER_WHATSAPP_NUMBER=+1234567890/g' .env
        sed -i 's/HF_API_KEY=your_huggingface_api_key_here/HF_API_KEY=test_key/g' .env
        sed -i 's/API_BEARER_TOKEN=your_secure_bearer_token_here/API_BEARER_TOKEN=test_token/g' .env
        sed -i 's/TWILIO_ACCOUNT_SID=your_twilio_account_sid/TWILIO_ACCOUNT_SID=test_sid/g' .env
        sed -i 's/TWILIO_AUTH_TOKEN=your_twilio_auth_token/TWILIO_AUTH_TOKEN=test_token/g' .env
        sed -i 's/TWILIO_WHATSAPP_FROM=whatsapp:+1234567890/TWILIO_WHATSAPP_FROM=whatsapp:+1234567890/g' .env

    - name: Test FastAPI application startup
      run: |
        source venv/bin/activate
        python -c "from app import app; print('FastAPI app loaded successfully')"

    - name: Test API endpoints
      run: |
        source venv/bin/activate
        pip install httpx
        python -c "
        import asyncio
        from fastapi.testclient import TestClient
        from app import app
        
        client = TestClient(app)
        
        # Test health endpoint
        response = client.get('/healthz')
        print(f'Health endpoint: {response.status_code}')
        assert response.status_code == 200
        
        # Test plan endpoint
        response = client.get('/plan/today')
        print(f'Plan endpoint: {response.status_code}')
        assert response.status_code == 200
        
        # Test dry-run endpoint
        response = client.get('/dry-run')
        print(f'Dry-run endpoint: {response.status_code}')
        assert response.status_code == 200
        
        print('All API endpoints working correctly!')
        "

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate

    - name: Install dependencies
      run: |
        source venv/bin/activate
        pip install --upgrade pip
        pip install -e .
        pip install bandit safety

    - name: Run security checks
      run: |
        source venv/bin/activate
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
